react的基本步骤，就是先定义一个渲染器，也就是在哪个地方，也就是在哪个标签里渲染，跟vue的挂载id是APP的标签类似，在body里写个标签，《div id=root》《/div》
                第二步就是在script里获取到上面的元素，并定义好你要挂载上去的内容，写法遵循JSX的语法格式    获取元素： const root=document.getElementById('root')   定义好要放上去的内容  var vReact=<div> 就是跟写html内容基本一样 </div>
                第三步就是渲染上去 ：用react里面自带的方法   ReactDOM.render(vReact ，root )

jsx的语法：
        变量的插值表达式使用:用单大括号   var a=1  <div> {a} </div>      注释的写法  <div> 内容 {/*这里写的都是属于注释*/} </div> 

        属性的绑定：  const ss={color：“red”}   《div style={ss}》《/div》  记得属性的值那里不能加双引号了 

        数组的处理：1）直接处理，就是直接把这个数组用插值表达式放  var arr=[1,2,3]  <div> {arr} </div>   这个显示的效果不好，就直接把所有数据连一起显示一行 123
                   2）处理数组：跟vue的 v-for差不多，只不过是在哪个标签里写循环，最后循环出来的结果就放这，比如我要循环ul下面的li
                        <ul>{ arr.map( (item , index)=>{ return <li key={index}> {item} </li> }) } </ul>  这里最外层的大括号必须要写，表示里面是js代码，然后同意的，里面用到前面定义的数据的话，就是用{}  这个map方法就是以前的数组的map方法，只不过
                            这里是return出来一个标签  然后同样的，每个被循环的要加key

   工程化：组件：工程化里面的入口文件的名字是index.js   组件名在定义时候，还要在被引入时候用的变量名，都要首字母大写  import Abcd from "../src/components/test1.jsx"  这里这个名字首字母一定要大写

                函数组件：跟vue差不多，组件的话后缀名可以写js 也可以写jsx 推荐写jsx 就跟vue一样。那就在一个jsx文件里，写个函数呗
                         import react form "react"  这个在高版本可以不写，但是写了肯定没错
                         function Aaaa（）{              这里定义的组件函数名首字母必须大写
                             return ( <qdiv></div> )      这里必须要返回一个虚拟DOM 也就是jsx语法，且内容必须有顶级元素。表示该组件的显示内容
                         } export default Aaaa
  
                类组件：就是用类声明的方式来定义组件：先要导出react和react里面的总父类 import react ，{component} from "react'
                          Class A extends component{
                              render(){
                                  return <div>xxx</div>    必须要有render方法，必须里面要return有个顶级元素的jsx
                              }
                          }
  
                 组件间传值：函数组件父传子：这个的意思是，你父组件在使用的时候，要用到子组件，但是同时可以给子组件一些数据，然后最后显示的时候，可以是打开父组件的，你单独打开子组件，没有效果的                  
                       方式也简单，先在父组件里的引入子组件，然后再在父组件的return里面写子组件的标签，同时这时候在这个子组件标签里写自定义属性（随便） 值就是想要给子组件的数据，然后子组件本身
                       里，写函数时候有个形参，一般都是props ，这个形参就是拿到了数据对象，再在自己子组件里用就行
                       父组件： return （ <div> <child a="111" b="222"></child> </div> ） 这就是把数据 a=111和b=222传过去了
                       子组件  function（props）{return xxx}   这里的形参props就是传来数据额对象形式
            
                       类组件的 父传子：跟上面形式一模一样，只不过在子组件时候，props属性是归属在实例的，所以这时候子组件用this.props就是数据对象

                事件定义：跟之前的html写法基本上一模一样，事不过事件名要遵循小驼峰写法，html里面都是小写
                        函数组件： return 《div onClick={handler}》  同样的，这里就相当于写属性，在jsx语法里，属于不能加引号的  然后这个处理函数写在这个组件函数的前面就行
                        类组件：  return  《div onClick={this.handler}>  在类里面用方法，一样的就是要加this的，函数写在类里面，就跟之前html一样

                事件对象：跟元素的html一样，事件处理程序里有个默认参数，里面的的e.target就是这个拿到DOM标签本身，后续如果有需要，就是正常的js操作dom

                事件函数传参：在类组件中，事件函数传参是在函数后面再调用bind函数，里面第一个形参是固定的this，后面开始就是实参。《div onClick={handler.bind(this , 参数1 ，参数2)}》
                            然后再定义函数的时候，写实参时候，不用管上面的形参this  但是如果在函数里要事件对象，只要比实际传的形参多一个，也就是最后一个就是事件对象了
                            比如上面传了两个形参，函数的实参这里就写  handler（实参1 ， 实参2 ，e）这个e就是事件处理函数，而且这个函数里面是可以用this的，这就是bind第一个形参的作用






