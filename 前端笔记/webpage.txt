    1、webpage是基于node的，所以这个应该安装在项目文件夹下的，之前的vue项目，最后的时候执行了vue bulid 其实就是使用了node中，默认的打包规则打包了项目

    2、首先就是在node环境下初始化项目 npm init  文件夹，，然后如果你想要把这个文件用vue来管理，那再次，vue created 文件夹  也就是说webpack只要项目在node中初始化了，就可以安装webpack来处理了 

    3、配置自定义命令，在package.json 文件中的script里写自定义命令属性和值  "bulid":"webpack"  属性值就是执行命令的名字，值webpack的意思，就是执行webpack打包程序

    4、配置：这是最主要的，首先配置文件是要自己写的，不会在初始化项目时候自定创建，写在项目跟目录下，名字就是webpack.config.js，注意，写在根目录下的这个配置文件是这个webpack默认找的位置，也就是我们前面
            自定义里命令里，直接写的那个webpack命令它找的目录就是项目根文件 下，所以可以执行，但是实际项目中，一般有几个配置文件来配置不同的规则打包，这时候我们一般把配置文件放在一个config的文件夹里，名字
            只要是.js文件就行，然后再在自定义指令里面配置指令，那里会指定到时候打包时候找哪个配置文件去，这就实现了多种自主的打包方式

            单文件配置 ：就是放在根目录下的配置文件，实际项目一般不用
            配置文件说到底就是一个js文件，而且是node环境里的js文件，所以里面具体配置写的时候，就跟写一般的moudle一样，要导出
            const path = require("path");                           跟一般的moudel写法一样，后面用到了path，引入先
                module.exports = {
                    mode: "development",                            // 打包模式  development |  production
                    entry: "./src/index.js",                        //打包时候入口文件
                    output: {                                      // 项目出口
                        path: path.resolve(__dirname, "../dist"),   // [name]默认的名称为main（如果需要分目录，可以在名字前加文件夹名字） 一定要是绝对路径                     
                        filename: "js/[name].js",
                    },
                };

            多文件配置，也是一样写好几个配置文件后，放在config文件夹下，比如写了两个配置文件，分别是生产环境下打包和上线版本打包配置， dev.js 和pro.js
                      然后同样的跟默认的打包设置一样，在package.json 文件里配置下指令和指令执行指定的打包文件就行
                      <script>
                            "dev":"webpack --config ./config/dev.js"     这样以后在执行这个的时候，就是输入指令 npm run dev 就行了
                            "pro":"webpack --config ./config/pro.js"
                      </script>

        配置里的plugin： 这里是放插件的地方，插件 html-web-package-plugin 因为webpack打包的时候，不会打包html文件的，所以这个插件就是让webpack也会把html文件打包到dist里面
                        同时还会自动在html文件里写好这个html引入的js文件
                先引入插件，然后 plugins: [
                                 new HtmlWebpackPlugin({
                                     template: "./src/index.html",    // template是必须的
                                     ]

        配置里的dev-server：这也是一个插件，但是它的配置文件不是写在plugin里面，而是跟这个plugin是平行的写。这个插件就是一个临时的服务器，让项目可以跑在这个临时服务器上面，同时这个服务器可以配置一些功能：
                比如前面vue项目时候，可以直接npm run server 就是运行的这个插件，还要vue项目里是可以边写边实时刷新，就是它里面的配置的，还有可以配置服务器的端口，代理等等

                 devServer: {
                     contentBase: path.resolve(__dirname, "../dist"),   // 运行web根目录
                     watchContentBase: true,    // 监视目录下的所有文件，一旦文件有变化则就会reload重载
                     watchOptions: {
                         ignored: /node_modules/,       // 忽略文件
                     },
                     compress: true,                    // gzip压缩
                     port: 8080,                        // 端口号 
                     host: "localhost",                 // 域名
                     open: true,                         // 自动打开浏览器
                     clientLogLevel: "none",            // 不要显示启动服务器的日志信息
                     proxy: {                               // 服务器代理 --> 解决开发环境跨域问题 
                         "/api": {                       // 一旦devServer服务器接受到 /api开头的请求，就会把请求转发到另一个服务器
                             target: "http://localhost:3000",

                             pathRewrite: {                 // 发送请求时，请求路径重写: 将/api 去除
                                 "^/api": "",

                    然后在package.json 配置里给它自定义一个指令  “server”：“webpack-dev-server --config ./config/dev.js”
        
        配置里的loader：因为webpack默认是只会处理js文件的，处理过程是，先看文件是不是js，如果是再看这个js文件里有没有高级语法（比如类写法）如果有，再看webpack里有没有装bable如果装了，就处理，如果没装就报错
                                                                                   如果不是js文件，就看有没有装对应的文件loader，如果有就处理，如果没，就报错
                        module: {
                        css的loader：          rules: [{ test: /\.css$/, use: ["style-loader", "css-loader"] }],  第一个数据就是正则匹配所有的css结尾文件。第二个就是两个处理css的loader，这两位置不能换，不然报错
                        less的loader：                 {test: /\.less$/,use: ["style-loader","css-loader","less-loader"]} 这个需要三个才行
                        sass的loader：                 {test: /\.scss$/,use: ["style-loader","css-loader","sass-loader"]}
                                            },     实际的项目中，一般只会用一种来处理样式   

        插件MinCssExtractplugin：因为如果用上面的方式处理css或者less css样式时候，其实webpack的处理方式是把那些样式动态的的加载了html的head标签里了，就是在head标签里写《style》标签，然后打包玩后，整个dist里面是没有样式文件的
                                这样一是加大了内存的消耗，二是都不把样式打包出来成文件，而就是style-loader做的这样的事情，所以我们用这个新插件，代替这个style-loader做的这样的事情，所以我们用这个新插件，代替这个style
                                这个插件先要在plugin里面new，然后再在moudle里面替换掉那个style-roader  导入后 在plugin里面new
                                     new MiniCssExtractPlugin({
                                           filename: "css/[name]_[hash:6].css",  前面name就是保持原文件名字上在加上hash的6位，这主要为了防止重名
                                      }),
                                 再在moudle里面的rules里面  { test: /\.css$/, use: ["MiniCssExtractPlugin.loader", "css-loader"] }

        图片的loader：因为图片在三个地方可能有，一个是写样式时候（background：url（）），一个是写地址时候 ，还要一个就是直接的html本身文件里要用的 所以这里用三个 url-loader file-loader html-loader
                     它们的配置就是跟样式一样，写在loader里
                      rules: [
        {
            test: /\.(png|jpeg|jpg|gif)$/i,  匹配的图片类型
            use: [
                 { loader: "url-loader",
                    options: {
                        limit: 8 * 1024,              // 图片小于8kb，就会被base64处理
                        name: "img/[name].[ext]",     // 打包后的路径和文件名称 [ext]扩展名
                        publicPath: "/",              // 打包后的文件指定访问路径前缀
                    },
                }, {
                   test: /\.html$/,
                   loader: ["html-loader"],   // 处理html中的img(负责引入img,从而能被url-loader进行处理)

        高级语法的loader  这个要安装好几个文件， npm i -D babel-loader @babel/core @babel/runtime    
                                              npm i -D @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties                      
                        这个配置时候，有个特别的，要现在项目根目录下写一个babel.config.js配置文件，里面写
                                    module.exports = {
                                             presets: ["@babel/preset-env"],
                                             plugins: ["@babel/plugin-transform-runtime","@babel/plugin-proposal-class-properties"]
                                         }
                        然后再在loader里面配置  {test: /\.js$/,
                                                  use: "babel-loader",
                                                  exclude: /node_modules/  就是不处理moudles里面的js，因为那里都是下载下来的包


        省略写路径时候的后缀名配置：就像vue项目中在引入文件时候，可以使用@标志src，还可以省略js和vue的后缀名  就是在配置文件里，跟loader这些同等级的，写个配置
                        resolve: {
                                alias: {
                                    "@": path.join(__dirname, "../src"),  // 定义一个@，可在import引入时使用
                                },
                                extensions: [".js"],    // 设置可以忽略不写的后缀
                            },
       